TestPlayBufS : UnitTest {
  
  var
    s
  ;
  
  setUp {
    s = Server.default;
    this.bootServer(s);
    SynthDef(\TestPlayBufS, {|rate=0, t_trig=0, start=0, buffer, bufferS|
      var control;
      control = PlayBufS.kr(2, bufferS, rate, t_trig, start, 2);
      RecordBuf.kr(control, buffer, run: rate>0);
      SendReply.kr(Done.kr(control), '/TestPlayBufS');
    }).send(s);
  }

  test_play {
  
    var bufferS, synth, buffer, responder, data;

    bufferS = Buffer.loadCollection(s, [
      0.01, 48, 0.01,
      0.02, 59, 0.02,
      0.03, 50, 0.03,
      0.04, 51, 0.04,
      0.05, 52, 0.05,
    ], 3);
    buffer = Buffer.alloc(s, 512, 2);
    responder = OSCFunc({
      buffer.getn(0, 512, {|d|
        //d.asCompileString.post
        data = d;
      });
    }, '/TestPlayBufS').oneShot;
    s.sync;
    synth = Synth(\TestPlayBufS, [\rate, 1, \buffer, buffer.bufnum, \bufferS, bufferS.bufnum], s);
    NodeWatcher.register(synth);
    s.sync;
    this.assertEquals(synth.isRunning, true);
    this.asynchAssert({ data.notNil }, {
      this.assertEquals(data.round(0.00001), [ 48.0, 0.0099999997764826, 48.0, 0.0099999997764826, 48.0, 0.0099999997764826, 48.0, 0.0099999997764826, 48.0, 0.0099999997764826, 48.0, 0.0099999997764826, 0.0, 0.0, 59.0, 0.019999999552965, 59.0, 0.019999999552965, 59.0, 0.019999999552965, 59.0, 0.019999999552965, 59.0, 0.019999999552965, 59.0, 0.019999999552965, 59.0, 0.019999999552965, 59.0, 0.019999999552965, 59.0, 0.019999999552965, 59.0, 0.019999999552965, 59.0, 0.019999999552965, 59.0, 0.019999999552965, 59.0, 0.019999999552965, 59.0, 0.019999999552965, 0.0, 0.0, 50.0, 0.029999999329448, 50.0, 0.029999999329448, 50.0, 0.029999999329448, 50.0, 0.029999999329448, 50.0, 0.029999999329448, 50.0, 0.029999999329448, 50.0, 0.029999999329448, 50.0, 0.029999999329448, 50.0, 0.029999999329448, 50.0, 0.029999999329448, 50.0, 0.029999999329448, 50.0, 0.029999999329448, 50.0, 0.029999999329448, 50.0, 0.029999999329448, 50.0, 0.029999999329448, 50.0, 0.029999999329448, 50.0, 0.029999999329448, 50.0, 0.029999999329448, 50.0, 0.029999999329448, 50.0, 0.029999999329448, 50.0, 0.029999999329448, 0.0, 0.0, 51.0, 0.03999999910593, 51.0, 0.03999999910593, 51.0, 0.03999999910593, 51.0, 0.03999999910593, 51.0, 0.03999999910593, 51.0, 0.03999999910593, 51.0, 0.03999999910593, 51.0, 0.03999999910593, 51.0, 0.03999999910593, 51.0, 0.03999999910593, 51.0, 0.03999999910593, 51.0, 0.03999999910593, 51.0, 0.03999999910593, 51.0, 0.03999999910593, 51.0, 0.03999999910593, 51.0, 0.03999999910593, 51.0, 0.03999999910593, 51.0, 0.03999999910593, 51.0, 0.03999999910593, 51.0, 0.03999999910593, 51.0, 0.03999999910593, 51.0, 0.03999999910593, 51.0, 0.03999999910593, 51.0, 0.03999999910593, 51.0, 0.03999999910593, 51.0, 0.03999999910593, 51.0, 0.03999999910593, 51.0, 0.03999999910593, 51.0, 0.03999999910593, 0.0, 0.0, 52.0, 0.050000000745058, 52.0, 0.050000000745058, 52.0, 0.050000000745058, 52.0, 0.050000000745058, 52.0, 0.050000000745058, 52.0, 0.050000000745058, 52.0, 0.050000000745058, 52.0, 0.050000000745058, 52.0, 0.050000000745058, 52.0, 0.050000000745058, 52.0, 0.050000000745058, 52.0, 0.050000000745058, 52.0, 0.050000000745058, 52.0, 0.050000000745058, 52.0, 0.050000000745058, 52.0, 0.050000000745058, 52.0, 0.050000000745058, 52.0, 0.050000000745058, 52.0, 0.050000000745058, 52.0, 0.050000000745058, 52.0, 0.050000000745058, 52.0, 0.050000000745058, 52.0, 0.050000000745058, 52.0, 0.050000000745058, 52.0, 0.050000000745058, 52.0, 0.050000000745058, 52.0, 0.050000000745058, 52.0, 0.050000000745058, 52.0, 0.050000000745058, 52.0, 0.050000000745058, 52.0, 0.050000000745058, 52.0, 0.050000000745058, 52.0, 0.050000000745058, 52.0, 0.050000000745058, 52.0, 0.050000000745058, 52.0, 0.050000000745058, 52.0, 0.050000000745058, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 ].round(0.00001));
      this.assertEquals(synth.isRunning, false);
    }, "data timeout", 1);
    
  }

}

